package chapter10.ex05;

class A {
	
	//인스턴스 필드
	int m = 20;
	//인스턴스 메소드
	void print () {
		System.out.println("A - print()");
	}
	
}
class B extends A{
	
	int m = 30;
	//인스턴스 메소드는 오버라이딩 ====> 메소드의 이름이 같고 타입도 같으면 오버라이딩 문구가 없어도 오버라이딩됨.
	void print() {
		System.out.println("B - print()");
	}
}

public class Overriding_Instance_Field {
	
	public static void main(String[] args) {
		
		//상속에서 주의 : 오버라이딩은 인스턴스 메소드만 오버라이딩이 된다.
		
		
		//상속은 부모 클래스의 필드, 메소드, 이너클래스를 상속받는다. 생성자는 상속되지 않는다.
		//				- 필드는 인스턴스필드, 정적 필드가 존재......  메소드는 인스턴스필드, 정적필드가 있음.
		//				- 인스턴스필드, 정적필드,정적메소드는 오버라이딩이 되지 않는다.
		
		
		//필드와 메소드의 메모리 저장 위치
		// 			- 인스턴스 필드 : 힙공간에 저장이됨. 부모필드, 자식필드 각각 별개의 공간에 저장됨.==> 오버라이딩 되지않음.
		//			- 정적 필드	 : 클래스 영역에 저장이됨. 부모, 자식은 별도의 공간에 저장됨.==> 오버라이딩 되지않음.
		//			- 인스턴스 메소드 : 메모리의 힙영역에 이름만 있고 인스턴스메소드 영역에 저장됨. ==> 오버라이딩 됨.
		//							부모의 것이 먼저 생성되고, 자식의 것이 나중에 생성되어서 그위에 덮어 씌워짐.
		//							그래서 부모의 것을 호출해도 자식의 것이 오버라이딩되어서 읽어지는것임.
		//			- 정적 메소드	  : 클래스 영역에 저장이됨. 부모, 자식은 별도의 공간에 저장됨. ==> 오버라이딩 되지않음.
		//							스택영역에 주소가 있고, 힙영역에 이름이 있고, 이름을 호출하면 클래스영역의 실행부를 호출함.
		
		
		
		
		//자식객체를 생성하면서 부모타입으로 지정			//각각의 힙영역의 공간에 A도 B도 다르게 m값이 저장된다.(인스턴스필드는 오버라이딩 되지않음.)
		A a1 = new B();						
		//m필드의 값을 출력
		System.out.println(a1.m);
		
		a1.print();			//오버라이딩 되어서 출력됨.
		
		B b1 = (B) a1;		//a1을 b1으로 다운캐스팅
		
		System.out.println(b1.m);
		b1.print();
		
		
	}

}
